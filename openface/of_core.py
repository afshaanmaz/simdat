#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
from simdat.core import plot


class OPENFACE(plot.PLOT):
    def get_name_root(self, name):
        return name.split('_')[0]

    def find_unique_keys(self, input_dic):
        keys = []
        for key in input_dic:
            key_root = self.get_name_root(key)
            if key_root in keys:
                continue
            keys.append(key_root)
        return keys

    def assign_index(self, index, p):
        root = self.get_name_root(p)
        if root not in index:
            index[root] = []
        if p not in index[root]:
            index[root].append(p)

    def read_reconova(self, preffix='face', brand_id='test1'):
        """ Read output generated by Reconova system

        The output should named as $PREFFIX_$BRANDID.json

        Keyword arguments:
        preffix -- the preffix of the input file (default: 'face')
        brand_id the suffix of the input file (default: 'test1')

        """

        fname = ''.join([preffix, '_', brand_id, '.json'])
        ori_input = self.parse_json(fname)
        r = ori_input['results']
        output = []
        img_counter = 0.0
        accu_counter = 0.0
        sum_conf = 0.0
        for img in r:
            img_counter += 1
            highest_conf = 0.0
            highest_can = ''
            for c in img["candidate"]:
                cl = float(c['confidence'])
                if c['brand_id'].find(brand_id) > -1:
                    sum_conf += cl
                if cl > highest_conf:
                    highest_conf = cl
                    highest_can = c['brand_id']
            if highest_can.find(brand_id) > -1:
                accu_counter += 1

        print "Average CL: %.2f" % (sum_conf/img_counter)
        print "Accuracy: %.2f" % (accu_counter/img_counter)

    def draw_dist_comparison(self, fname='./output.json'):
        """ Draw matrix for the results from compare.py

        Example of the input json see
            tools/tests/openface/examples/compare_p2_p3_output.json

        Keyword arguments:
        fname -- input json file to be opened (default: './output.json')

        """
        output = self.parse_json(fname)
        keys = self.find_unique_keys(output)
        index = {}

        for name1 in output:
            self.assign_index(index, name1)
            for name2 in output[name1]:
                self.assign_index(index, name2)

        combs = list(self.get_combinations(keys))
        result = {}

        for comb in combs:
            rkey = comb[0] + '-' + comb[1]
            result[rkey] = np.zeros((len(index[comb[0]]), len(index[comb[1]])))

        for p1 in output:
            p1r = self.get_name_root(p1)
            i1 = index[p1r].index(p1)
            for p2 in output[p1]:
                p2r = self.get_name_root(p2)
                i2 = index[p2r].index(p2)
                comb_key = p1r + '-' + p2r
                if p1r == p2r:
                    result[comb_key][i1][i2] = output[p1][p2]
                    result[comb_key][i2][i1] = output[p1][p2]
                else:
                    if comb_key not in result:
                        comb_key = p2r + '-' + p1r
                    result[comb_key][i1][i2] = output[p1][p2]

        cm = plt.cm.Greys
        for comb in combs:
            rkey = comb[0] + '-' + comb[1]
            self.plot_confusion_matrix(result[rkey], show_text=False,
                                       norm=False, xlabel='', ylabel='',
                                       yticks=index[comb[0]],
                                       xticks=index[comb[1]],
                                       title="Compare Image Distances",
                                       xrotation=90, cmap=cm,
                                       fname='./cm_' + rkey + '.png')
